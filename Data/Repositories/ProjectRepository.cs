using Data.Contexts;
using Data.Entities;
using Data.Interfaces;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace Data.Repositories;

public class ProjectRepository(DataContext context) : BaseRepository<ProjectEntity>(context), IProjectRepository
{
    private readonly DataContext _context = context;

    public override async Task<IEnumerable<ProjectEntity>> GetAsync()
    {
        return await _context.Set<ProjectEntity>()
            .Include(p => p.Client)     
            .Include(p => p.Status)    
            .Include(p => p.TeamMembers)
            .ThenInclude(te => te.Employee) // Include Employee details if needed
            .ToListAsync();
    }

    public override async Task<ProjectEntity> GetAsync(Expression<Func<ProjectEntity, bool>> expression)
    {
        var project = await _context.Set<ProjectEntity>()
            .Include(p => p.Client)     
            .Include(p => p.Status)    
            .Include(p => p.TeamMembers)
            .ThenInclude(te => te.Employee) // Include Employee details if needed
            .FirstOrDefaultAsync(expression);

        return project ?? new ProjectEntity();
    }
    //Code generated by GitHub Copilot to access the related entities 

}
