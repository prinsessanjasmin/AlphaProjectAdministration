
using Data.Contexts;
using Data.Entities;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;

namespace Data.Seed;

//This class structure is generated by Claude AI with instructions from me because I wanted a way to populate the database with the basic needs for a new user to be able to use it with a fresh database. 
public static class DataSeeder
{
    public static async Task SeedData(IServiceProvider serviceProvider)
    {
        using var scope = serviceProvider.CreateScope();
        var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
        var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
        var dbContext = scope.ServiceProvider.GetRequiredService<DataContext>();
        
        await SeedRoles(roleManager);
        await SeedTargetGroups(dbContext);
        await SeedStatuses(dbContext);
        await SeedNotificationTypes(dbContext);
        await SeedAddress(dbContext);
        await SeedUsers(userManager);
    }

    private static async Task SeedRoles(RoleManager<IdentityRole> roleManager)
    {
        string[] roleNames = ["Admin", "Manager", "User"];

        foreach (var roleName in roleNames)
        {
            var exists = await roleManager.RoleExistsAsync(roleName);
            if (!exists)
            {
                await roleManager.CreateAsync(new IdentityRole(roleName));
            }
        }
    }

    private static async Task SeedTargetGroups(DataContext context)
    {
        if (!context.TargetGroups.Any())
        {
            string[] targetNames = ["Admins", "Managers", "Users"];
            var targetGroups = targetNames.Select(name => new TargetGroupEntity { TargetGroup = name }).ToList();

            context.TargetGroups.AddRange(targetGroups);
            await context.SaveChangesAsync();
        }
    }

    private static async Task SeedStatuses(DataContext context)
    {
        if (!context.Statuses.Any())
        {
            string[] statusNames = ["Pending", "Active", "Completed"];
            var statuses = statusNames.Select(name => new StatusEntity { StatusName = name }).ToList();

            context.Statuses.AddRange(statuses);
            await context.SaveChangesAsync();
        }
    }

    private static async Task SeedNotificationTypes(DataContext context)
    {
        if (!context.NotificationTypes.Any())
        {
            string[] typeNames = ["User", "Project", "Client"];
            var notificationTypes = typeNames.Select(name => new NotificationTypeEntity { NotificationType = name }).ToList();

            context.NotificationTypes.AddRange(notificationTypes);
            await context.SaveChangesAsync();
        }
    }

    private static async Task SeedAddress(DataContext context)
    {
        var addresses = context.Addresses.Any(); 

        if (!addresses)
        {
            var address = new AddressEntity
            {
                StreetAddress = "Administratörsgatan 1",
                PostCode = "10 000",
                City = "Ljungby"
            };

            context.Addresses.Add(address);
            await context.SaveChangesAsync();
        }
    }

    private static async Task SeedUsers(UserManager<ApplicationUser> userManager)
    {
        var adminEmail = "admin@domain.com";
        var adminUser = await userManager.FindByEmailAsync(adminEmail);
        string imgPath = "/ProjectImages/Icons/avatar2.svg";

        if (adminUser == null)
        {
            adminUser = new ApplicationUser
            {
                UserName = adminEmail,
                Email = adminEmail,
                EmailConfirmed = true,
                FirstName = "System",
                LastName = "Administrator",
                JobTitle = "System Administrator",
                ProfileImagePath = imgPath,
                DateOfBirth = new DateOnly(2000, 1, 1),
                AddressId = 1,
                PhoneNumber = "070-000 0000",
                IsProfileComplete = true
            };  

            var result = await userManager.CreateAsync(adminUser, "Admin@123456");

            if (result.Succeeded)
            {
                await userManager.AddToRoleAsync(adminUser, "Admin");
            }
            
        }
    }
}

