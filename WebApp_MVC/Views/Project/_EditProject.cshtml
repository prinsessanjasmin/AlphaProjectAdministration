@model EditProjectViewModel
@{
    ViewData["Title"] = "Edit Project";
}

<div id="editProjectForm">
    <form class="form form-project" method="post" asp-action="EditProject" asp-controller="Project" enctype="multipart/form-data" novalidate>
        <header class="side-by-side">
            <h2>Edit Project</h2>
            <button class="btn-close" type="button" data-close="true"></button>
        </header>
        <div class="form-content">
            <input type="hidden" asp-for="ProjectId" />
            <div class="upload-image">
                <button class="btn-upload-image">
                    <img src="~/ProjectImages/Icons/Camera.png" alt="Camera icon.">
                    <input asp-for="ProjectImage" accept="image/*" class="hidden"  />
                </button>
            </div>
            <div class="form-input">
                <label asp-for="ProjectName"></label>
                <div class="input-group">
                    <input data-val="true" asp-for="ProjectName" />
                    <span asp-validation-for="ProjectName" class=""></span>
                </div>
            </div>
            <div class="form-input">
                <label asp-for="ClientId"></label>
                <div class="input-group">
                    <select data-val="true" asp-for="ClientId" asp-items="Model.ClientOptions">
                        <option value="">-- Select Client --</option>
                    </select>
                    <span asp-validation-for="ClientId"></span>
                </div>
            </div>
            <div class="form-input long-form-input">
                <label asp-for="Description"></label>
                <div class="wysiwyg">
                    <textarea asp-for="Description" class="hidden hidden-textarea">@Model.Description</textarea>
                    <div id="wysiwyg-editor"></div>
                    <div id="wysiwyg-toolbar">
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-align" value=""></button>
                            <button class="ql-align" value="center"></button>
                            <button class="ql-align" value="right"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="bullet"></button>
                            <button class="ql-list" value="ordered"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </div>
                </div>
            </div>
            <div class="horizontal-form">
                <div class="form-input">
                    <label asp-for="StartDate"></label>
                    <div class="input-group">
                        <input data-val="true" asp-for="StartDate" type="date" />
                        <span asp-validation-for="StartDate"></span>
                    </div>
                </div>
                <div class="form-input">
                    <label asp-for="EndDate"></label>
                    <div class="input-group">
                        <input data-val="true" asp-for="EndDate" type="date" />
                        <span asp-validation-for="EndDate"></span>
                    </div>
                </div>
            </div>
            <div class="form-input">
                <label asp-for="SelectedTeamMemberIds">Team members</label>
                <div class="selected-member-display" id="edit-selected-member-display"></div>
                <div class="input-group member-selector" id="edit-tagged-members">
                    <input type="text" id="edit-input-member-search" placeholder="Add team member(s)..." />
                    <input type="hidden" asp-for="SelectedTeamMemberIds" id="edit-selected-team-member-ids"
                           data-val="true" data-val-required="Required" />
                    <input type="hidden" id="available-team-members"
                           value="@Json.Serialize(Model.AvailableTeamMembers)" />

                    @* <label for="search-icon" class="search-icon"></label> *@
                    <div id="edit-member-search-results" class="member-search-results"></div>
                    <span asp-validation-for="SelectedTeamMemberIds"></span>
                </div>
            </div>
            <div class="form-input">
                <label asp-for="Budget"></label>
                <div class="input-group">
                    <input data-val="true" asp-for="Budget" id="budget-input" />
                    <span asp-validation-for="Budget"></span>
                </div>
            </div>
        </div>
        <footer>
            <button type="submit" class="btn btn-popup">Save Changes</button>
            <button type="button" class="btn btn-popup btn-delete">Delete Project</button>
        </footer>
    </form>
</div>
@await Html.PartialAsync("Partials/Components/_ValidationScript")
@await Html.PartialAsync("Partials/Components/_QuillScript")

<script>
        // Function to initialize when ready
        function initializeMemberSelector() {

            if (typeof initMemberSelector !== 'function') {
                console.error("initMemberSelector function not found!");
                return;
            }

            var preselectedMembers = @Html.Raw(Json.Serialize(Model.PreselectedTeamMembers ?? new List<TeamMemberDto>()));

            initMemberSelector({
                containerId: 'edit-tagged-members',
                inputId: 'edit-input-member-search',
                resultsId: 'edit-member-search-results',
                selectedIds: 'edit-selected-team-member-ids',
                displayContainerId: 'edit-selected-member-display',
                searchUrl: '@Url.Action("SearchMembers", "Employee")',
                displayProperty: 'memberFullName',
                imageProperty: 'profileImage',
                memberClass: 'member',
                avatarFolder: '/Images/Uploads/ProfileImages/',
                emptyMessage: 'No team member found.',
                preselected: @Html.Raw(Json.Serialize(Model.PreselectedTeamMembers ?? new List<TeamMemberDto>())),
                availableMembers: @Html.Raw(Json.Serialize(Model.AvailableTeamMembers ?? new List<TeamMemberDto>()))
            });
        }

        // Try both immediate execution and DOM ready event
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            // Document already ready
            setTimeout(initializeMemberSelector, 100);
        } else {
            // Wait for document to be ready
            document.addEventListener('DOMContentLoaded', initializeMemberSelector);
        }

        // Also try a fallback with window.onload
        window.addEventListener('load', function() {
            if (typeof initMemberSelector === 'function') {
                initializeMemberSelector();
            }
        });
</script>

